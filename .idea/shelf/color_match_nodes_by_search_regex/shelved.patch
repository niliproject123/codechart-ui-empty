Index: src/app/app.component.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!-- <pre id=\"fileContent\" ><code [innerHTML]=\"sampleContent\"></code></pre> -->\r\n<textarea *ngIf=\"showNodeEditBox\" id='nodeTitle' [ngModel]=\"selectedNode?.label\" (keyup)=\"setTitle($event)\"></textarea>\r\n<div class=\"main\">\r\n  <div id=\"topbox\" class=\"topbox\">\r\n    <div class=\"dropdown mr5\">\r\n      <button class=\"btn btn-primary dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">File\r\n        <span class=\"caret\"></span>\r\n      </button>\r\n      <ul class=\"dropdown-menu \">\r\n        <li (click)=\"saveJsonVisible = true\" class=\"dropdown-item\">Json Save</li>\r\n        <li class=\"dropdown-item\"><label style=\"cursor: pointer\">json load\r\n          <input id='fileLoadInput' type=\"file\" (change)=\"loadFromFile($event)\"/>\r\n        </label>\r\n        </li>\r\n        <li (click)=\"saveFullVisible = true\" class=\"dropdown-item\">full save</li>\r\n        <li (click)=\"reload()\" class=\"dropdown-item\">reload</li>\r\n        <li (click)=\"clearVisiIds()\" class=\"dropdown-item\">clear visi ids</li>\r\n        <li (click)=\"rewriteVisiIds()\" class=\"dropdown-item\">rewrite visi ids</li>\r\n      </ul>\r\n    </div>\r\n    <div class=\"dropdown mr5\">\r\n      <button class=\"btn btn-primary dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">Config\r\n        <span class=\"caret\"></span>\r\n      </button>\r\n      <ul class=\"dropdown-menu\">\r\n        <li>\r\n          <p-dropdown [options]=\"paths\" (click)=\"pathDropdownClick($event)\" (onChange)=\"setSelectedPath($event.value)\"\r\n                      [filter]=\"true\" [style]=\"{'width': '500px','margin': '5px'}\"></p-dropdown>\r\n        </li>\r\n        <li>\r\n          <input placeholder='custom path' type=\"text\" [(ngModel)]=\"searchJson.path\" style=\"width: 500px;margin: 5px;\"/>\r\n        </li>\r\n        <li>\r\n          <input placeholder='file pattern' type=\"text\" [(ngModel)]=\"searchJson.filenamePattern\"\r\n                 style=\"width: 150px;margin: 5px;\"/>\r\n          <span><img height=\"25\" width=\"25\" src=\"assets/icons/regex.png\"/></span><input type=\"checkbox\"\r\n                                                                                        [(ngModel)]=\"searchJson.isFileNameRegex\"/>\r\n          <br/>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n    <span class=\"seperater\"> | </span>\r\n    <button (click)=\"undo()\" class=\"mr5\"><i class=\"fa fa-undo\" aria-hidden=\"true\"> </i></button>\r\n    <button (click)=\"chartActions.clearChart()\" class=\"mr5\">clear results</button>\r\n\r\n    <button *ngFor=\"let item of linkTypes\" (click)=\"linkNodes(item)\" class=\"mr5\">\r\n      <i class=\"fa fa-link\" aria-hidden=\"true\"></i>\r\n    </button>\r\n    <button *ngFor=\"let item of shapeTypes\" (click)=\"createShape(item)\" class=\"mr5\">\r\n      <i class=\"fa fa-commenting-o\" aria-hidden=\"true\"></i>\r\n    </button>\r\n    <span class=\"seperater\"> | </span>\r\n    <input placeholder='pattern' class=\"mr5\" type=\"text\" [(ngModel)]=\"searchJson.pattern\"\r\n           (keypress)=\"performSearch($event)\">\r\n    <input placeholder='regex flags' class=\"mr5\" type=\"text\" [(ngModel)]=\"searchJson.flags\" style=\"width: 40px\"/>\r\n    <div>\r\n      <span><img height=\"25\" width=\"25\" src=\"assets/icons/regex.png\"/></span><input type=\"checkbox\"\r\n                                                                                    [(ngModel)]=\"searchJson.isRegex\"/>\r\n    </div>\r\n    <button (click)=\"openFileVisible=true\" class=\"mr5\"><i class=\"fa fa-file-code-o\" aria-hidden=\"true\"></i>\r\n    </button>\r\n    <button (click)=\"searchActions.totalSearch()\" class=\"mr5\"><i class=\"fa fa-folder-o\" aria-hidden=\"true\"></i></button>\r\n    <button (click)=\"searchActions.searchSelectedFile()\" class=\"mr5\"><i class=\"fa fa fa-file-o\" aria-hidden=\"true\">\r\n    </i></button>\r\n    <button (click)=\"searchActions.contentSearch()\" class=\"mr5\">(..)</button>\r\n    <button (click)=\"createMatchFromSelection()\" class=\"mr5\"><i class=\"fa fa-hand-pointer-o\" aria-hidden=\"true\"></i>\r\n    </button>\r\n    <button (click)=\"createFileNode()\" class=\"mr5\"><i class=\"far fa-plus-square\" aria-hidden=\"true\"></i></button>\r\n    <span class=\"seperater\"> | </span>\r\n    <button *ngFor=\"let item of mySpecificSearchJsons\" class=\"mr5\"\r\n            (click)=\"performSavedSearch(item)\">{{item.name}}</button>\r\n    <div class=\"dropdown mr5\">\r\n      <button class=\"btn btn-primary dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\"><i class=\"fa fa-paint-brush\"\r\n                                                                                              aria-hidden=\"true\"></i>\r\n        <span class=\"caret\"></span>\r\n      </button>\r\n      <ul class=\"dropdown-menu dropdown-menu-right\">\r\n        <li style=\"margin: 5px;\">\r\n          <span *ngFor=\"let color of nodesColors\" class=\"colorpick\" [ngStyle]=\"{'background-color':color}\"\r\n                (click)=\"setSelecteionColor(color)\"></span>\r\n        </li>\r\n        <li style=\"margin: 5px;\">\r\n          <span><input placeholder='size' type=\"text\" [ngModel]=\"selectedNodeSize\"\r\n                       (keyup)=\"setSelectedNodesSize($event.target.value)\" style=\"width: 40px\"/></span>\r\n          <button (click)=\"setEdgePoint(true, false)\">-></button>\r\n          <button (click)=\"setEdgePoint(false, true)\">\r\n            <-\r\n          </button>\r\n          <button (click)=\"setEdgePoint(false, false)\">-\r\n          </button>\r\n          <button (click)=\"setEdgePoint(true, true)\">\r\n            <->\r\n          </button>\r\n        </li>\r\n        <li style=\"margin: 5px;\">\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n  <div id=\"filer\" class=\"filer\">\r\n    <div id=\"bordered\">\r\n      <div id=\"fullbox\">\r\n        <div class=\"cfilenameholder\" style=\"display: flex\">\r\n          <button (click)=\"increaseFileContentFont()\"> <i class=\"fa fa-plus\" aria-hidden=\"true\"></i></button>\r\n          <button (click)=\"decreaseFileContentFont()\"> <i class=\"fa fa-minus\" aria-hidden=\"true\"></i></button>\r\n          <span class=\"cfilename\">{{currentFile?.name}}</span>\r\n        </div>\r\n        <div id=\"fileContainer\" class=\"fileContainer\">\r\n          <pre id=\"codepre\"><code id=\"fileContent\" [innerHTML]=\"currentFile?.content\"></code></pre>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"h100w50\" style=\"border: 1px solid black\">\r\n      <div id=\"vis_element\" style=\"height:100%\" (click)=\"clickedChart($event)\"></div>\r\n    </div>\r\n  </div>\r\n  <div id='message_box'>\r\n    <pre>{{messageBoxQueue[0]?.title}}</pre>\r\n    <div>{{messageBoxQueue[0]?.message}}</div>\r\n  </div>\r\n</div>\r\n<p-dialog [contentStyle]=\"{'overflow':'visible'}\" [(visible)]=\"openFileVisible\" [width]=\"800\" [height]=\"500\" (onShow)=\"focusOnFileOpenInput()\">\r\n  <p-header> Get File</p-header>\r\n  <p-autoComplete #openfileInput [suggestions]=\"openFileSuggestions\" (onSelect)=\"getFile($event); openFileVisible=false\"\r\n                  (completeMethod)=\"filterAvailableFiles($event.query)\" [delay]=\"0\"\r\n                  [style]=\"{'width': '500px'}\"></p-autoComplete>\r\n</p-dialog>\r\n<p-dialog [(visible)]=\"saveJsonVisible\">\r\n  <p-header> Enter File Name</p-header>\r\n  <input type=\"text\" style=\"width:100%\" [(ngModel)]=\"saveJsonFileName\"/>\r\n  <p-footer>\r\n    <button type=\"button\" (click)=\"saveJsonVisible=false\">Cancel</button>\r\n    <button type=\"button\" (click)=\"jsonSave(); saveJsonVisible=false\">Save</button>\r\n  </p-footer>\r\n</p-dialog>\r\n<p-dialog [(visible)]=\"saveFullVisible\" [width]=\"800\" [height]=\"500\">\r\n  <p-header> Enter File Name</p-header>\r\n  <input type=\"text\" style=\"width:100%\" [ngModel]=\"saveJsonFileName\"/>\r\n  <p-footer>\r\n    <button type=\"button\" (click)=\"saveFullVisible=false\">Cancel</button>\r\n    <button type=\"button\" (click)=\"fullSaveToFile(); saveFullVisible=false\">Save</button>\r\n  </p-footer>\r\n</p-dialog>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/app.component.html	(date 1572801070000)
+++ src/app/app.component.html	(date 1572799428559)
@@ -67,7 +67,7 @@
     </button>
     <button (click)="createFileNode()" class="mr5"><i class="far fa-plus-square" aria-hidden="true"></i></button>
     <span class="seperater"> | </span>
-    <button *ngFor="let item of mySpecificSearchJsons" class="mr5"
+    <button *ngFor="let item of mySpecificSearchJsons; index" class="mr5" style="border: 3px solid" [style.borderColor]="item.color"
             (click)="performSavedSearch(item)">{{item.name}}</button>
     <div class="dropdown mr5">
       <button class="btn btn-primary dropdown-toggle" type="button" data-toggle="dropdown"><i class="fa fa-paint-brush"
Index: src/app/search/search.jsons.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>export interface PreSearchJson {\r\n  regex: any,\r\n  name: string,\r\n  findClosure?: boolean\r\n}\r\n\r\nexport class PreSeacrhJsonsUtils {\r\n  public static getSearchStringFromText(text: string, preRegex: string) {\r\n    return preRegex.replace('__TEXT__', text.trim());\r\n  }\r\n}\r\n\r\nexport const specificSearchJsons: PreSearchJson[] = [\r\n  // {\r\n  //   regex: '\\\\s*(public|private)\\\\s*__TEXT__\\\\(',\r\n  //   name: 'method decleration 2'\r\n  // },\r\n  {\r\n    regex: '\\\\s*[^\\\\.]\\\\s+__TEXT__\\\\(',\r\n    name: 'method decleration',\r\n    findClosure: true\r\n  },\r\n  {\r\n    regex: '(\\\\.|\")__TEXT__\\\\(.*',\r\n    name: 'method usage'\r\n  },\r\n  {\r\n    regex: '\\\\.__TEXT__[^(]',\r\n    name: 'variable usage'\r\n  },\r\n  {\r\n    regex: '\\\\b__TEXT__\\\\b',\r\n    name: 'exact'\r\n  },\r\n  {\r\n    regex: '\\\\s*((public)?|(private)?)\\\\s+__TEXT__\\\\s+=',\r\n    name: 'variable decleration'\r\n  },\r\n  {\r\n    regex: '\\\\s*(\"?)__TEXT__(\"?):',\r\n    name: 'json field decleration'\r\n  }\r\n  ,\r\n  {\r\n    regex: '\\\\s+interface\\\\s+__TEXT__\\\\s+',\r\n    name: 'interface'\r\n  }];\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/search/search.jsons.ts	(date 1572801070000)
+++ src/app/search/search.jsons.ts	(date 1572799667388)
@@ -1,7 +1,7 @@
 export interface PreSearchJson {
   regex: any,
   name: string,
-  findClosure?: boolean
+  color?: string
 }
 
 export class PreSeacrhJsonsUtils {
@@ -10,15 +10,14 @@
   }
 }
 
-export const specificSearchJsons: PreSearchJson[] = [
+export const SearchJsons: PreSearchJson[] = [
   // {
   //   regex: '\\s*(public|private)\\s*__TEXT__\\(',
   //   name: 'method decleration 2'
   // },
   {
     regex: '\\s*[^\\.]\\s+__TEXT__\\(',
-    name: 'method decleration',
-    findClosure: true
+    name: 'method decleration'
   },
   {
     regex: '(\\.|")__TEXT__\\(.*',
Index: src/app/app.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>///aaaa///\r\nimport {AutoComplete, CodeHighlighterModule} from 'primeng/primeng';\r\nimport {Component, OnInit, AfterViewInit, ViewChild} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {SearchActions} from './search/search.actions';\r\nimport {ChartConsts, ChartStyles, NodeColors, ChartStyle} from './chart/chart.consts';\r\nimport {StartSearchJson, TypeMapping, typesMapping} from './chart/jsons';\r\nimport {JsonPipe} from '@angular/common';\r\nimport {Network, DataSet, Node, Edge, IdType, NetworkEvents} from 'vis';\r\nimport {ChartWrapper, EventItem} from './chart/chart.wrapper';\r\nimport {ChartUtils, AttributesKey} from './chart/chart.utils';\r\nimport {ChartActions} from './chart/chart.actions';\r\nimport {DropdownModule} from 'primeng/primeng';\r\n\r\nconst pathStorageKey = 'selectedPath'\r\n\r\nexport interface CurrentFile {\r\n  content: string,\r\n  name: string,\r\n  lines: string[],\r\n  node: Node | Edge\r\n}\r\n\r\nexport interface messageBoxItem {\r\n  title: string,\r\n  message: string,\r\n  displayTime: number\r\n}\r\n\r\nimport * as $ from 'jquery';\r\nimport {CreateUtils} from './chart/create.utils';\r\nimport {SaveLoad} from './chart/save.load';\r\nimport {\r\n  MatchInfo, SaveNode, SaveJson, CreateTypes, FindInFilesResponse, SaveNodesResponse,\r\n  EndPoints, SearchJson, FileNode\r\n} from './types.nodejs';\r\nimport {keyframes} from '@angular/core/src/animation/dsl';\r\nimport {PreSearchJson, specificSearchJsons, PreSeacrhJsonsUtils} from './search/search.jsons';\r\nimport {AreaSelect} from './chart/area.select';\r\nimport {Utils} from './chart/Utils';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css'],\r\n  providers: [JsonPipe]\r\n})\r\nexport class AppComponent implements OnInit, AfterViewInit {\r\n  @ViewChild('openfileInput') private openfileInput: AutoComplete ;\r\n  public currentLineElement = null;\r\n  public lineEndElement = null;\r\n  public mySpecificSearchJsons: PreSearchJson[];\r\n\r\n  public chart: ChartWrapper = new ChartWrapper();\r\n  public chartActions = new ChartActions(this);\r\n  public searchActions = new SearchActions(this);\r\n  public saveLoad = new SaveLoad(this, this.http);\r\n  public areaSelect = new AreaSelect(this);\r\n  public paths = [];\r\n  public openFileVisible = false;\r\n  public saveJsonVisible = false;\r\n  public saveJsonFileName: string = \"\";\r\n  public saveFullVisible = false\r\n\r\n  private _searchJson: SearchJson = StartSearchJson;\r\n  public selectedNodeSize = '';\r\n\r\n  public shapeTypes = Object.keys(ChartStyles.nodesTypes);\r\n  public linkTypes = Object.keys(ChartStyles.linkTypes);\r\n  public nodesColors = NodeColors;\r\n\r\n\r\n  public typesMapping: TypeMapping[] = null;\r\n  public showNodeEditBox = false;\r\n\r\n  public currentFile: CurrentFile = null;\r\n  public fileElement: HTMLTextAreaElement = null;\r\n  private fileContainer: HTMLElement;\r\n  private messageBoxElement: HTMLElement;\r\n\r\n  public titleElement: HTMLElement = null;\r\n\r\n  public previousSelectedNode: Node | Edge = null;\r\n  public previousDblClickedNode: Node | Edge = null;\r\n  public lastDblClickedNode: Node | Edge = null;\r\n\r\n  public _markedText: string = null;\r\n\r\n\r\n  public layout: 'directional' | 'spread' = 'directional';\r\n  public availableFiles: string[] = [];\r\n  public openFileSuggestions: string[] = []\r\n\r\n\r\n  changeLayout() {\r\n    this.layout = this.layout == 'directional' ? 'spread' : 'directional';\r\n  }\r\n\r\n  constructor(public http: HttpClient, private jsonPipe: JsonPipe) {\r\n    console.log(this.shapeTypes);\r\n    this.searchJson = StartSearchJson;\r\n    this.typesMapping = typesMapping;\r\n    this.mySpecificSearchJsons = specificSearchJsons;\r\n\r\n    window['Global_app'] = this;\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.chartActions.initialize();\r\n    this.chart.initialize();\r\n    this.searchActions.initialize();\r\n    this.saveLoad.initialize();\r\n    this.areaSelect.intialize();\r\n\r\n    let resizeWindow = () => {document.getElementById('filer').style.height = ($(window).height() - document.getElementById('topbox').clientHeight - 40) + 'px'}\r\n    resizeWindow()\r\n    window.addEventListener('resize', ()=>{\r\n      resizeWindow()\r\n    });\r\n\r\n    let inputCollection = document.getElementsByTagName('input');\r\n    for (let i = 0; i < inputCollection.length; i++) {\r\n      inputCollection[i].addEventListener('keyup', (e) => {\r\n        e.stopPropagation();\r\n      });\r\n    }\r\n\r\n    this.http.get('http://localhost:2900' + EndPoints.getPaths).subscribe((res: { paths: string[] }) => {\r\n      let paths = res.paths\r\n      let storedPath: string = localStorage.getItem(pathStorageKey)\r\n      paths.sort((i,j)=>{if(i===storedPath) return -1; else return 0})\r\n      this.paths = paths.map(i => {\r\n        return {label: i, value: i};\r\n      });\r\n      this.setSelectedPath(this.paths[0].value);\r\n    });\r\n  }\r\n\r\n  public set searchJson(value: SearchJson) {\r\n    this._searchJson = value;\r\n  }\r\n\r\n  public get searchJson(): SearchJson {\r\n    return this._searchJson;\r\n  }\r\n\r\n  set selectedNode(element: Node | Edge) {\r\n    this.previousSelectedNode = this.selectedNode;\r\n    if (element == null || element === undefined) {\r\n      this.currentFile = null;\r\n      return;\r\n    }\r\n    console.log('selected:', element);\r\n\r\n    let selectedSize = ChartUtils.getElementSize(element);\r\n    this.selectedNodeSize = selectedSize ? (selectedSize.toString()) : '';\r\n\r\n    let selectTextInFile = () => {\r\n      if (ChartUtils.isNode(element)) {\r\n        if (ChartUtils.isOfFile(element)) {\r\n          let attributes = ChartUtils.getMatchAttributes(element) as MatchInfo;\r\n          if (attributes.lineNumber) this.setFileSelection(attributes.lineNumber + 1, attributes.endLineNumber ? attributes.endLineNumber : null);\r\n        } else if (ChartUtils.isFileNode(element)) {\r\n          this.setFileSelection(1, null);\r\n        }\r\n      }\r\n    };\r\n\r\n    // set file element\r\n    let elementAtts = this.chart.getAttributes(element);\r\n    if (!ChartUtils.isNode(element)) {\r\n      return;\r\n    }\r\n    if (ChartUtils.isFileNode(element)) {\r\n      this.setCurrentFile({\r\n        content: elementAtts.fileContent,\r\n        name: ChartUtils.getFilePath(element as FileNode),\r\n        node: element,\r\n        lines: elementAtts.fileContent.split('\\n')\r\n      }, selectTextInFile);\r\n    } else {\r\n      if (ChartUtils.isOfFile(element)) {\r\n        let connectedToFileNode = this.chart.getNode(elementAtts.ofFile);\r\n        let fileContent = this.chart.getAttributes(connectedToFileNode).fileContent;\r\n        this.setCurrentFile({\r\n          content: fileContent,\r\n          name: ChartUtils.getFilePath(connectedToFileNode as FileNode),\r\n          node: connectedToFileNode as Node,\r\n          lines: fileContent.split('\\n')\r\n        }, selectTextInFile);\r\n      } else {\r\n        this.setCurrentFile({\r\n          content: this.chart.getTitle(element),\r\n          name: '',\r\n          node: element,\r\n          lines: this.chart.getTitle(element).split('\\n')\r\n        }, () => {\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  setSelectedNodesSize(size) {\r\n    if (parseInt('size') === NaN) return;\r\n    this.chart.setSize(this.chart.getSelection(), parseInt(size));\r\n  }\r\n\r\n  setEdgePoint(left: boolean, right: boolean) {\r\n    this.chart.setArrows(this.chart.getSelection(), left, right);\r\n  }\r\n\r\n  public setFileSelection(startLineNumber, endLineNumber) {\r\n    if (this.currentLineElement !== null) {\r\n      this.currentLineElement.style.border = '';\r\n    }\r\n\r\n    if (this.lineEndElement !== null) {\r\n      this.lineEndElement.style.border = '';\r\n    }\r\n\r\n    if ((startLineNumber && endLineNumber)) {\r\n      this.currentLineElement = document.querySelectorAll('[data-line-number=\\\"' + startLineNumber + '\\\"]')[0].parentElement.parentElement.lastChild;\r\n      this.currentLineElement.style.borderTop = '1px solid';\r\n      this.lineEndElement = document.querySelectorAll('[data-line-number=\\\"' + endLineNumber + '\\\"]')[0].parentElement.parentElement.lastChild;\r\n      this.lineEndElement.style.borderBottom = '1px solid';\r\n    } else {\r\n      this.currentLineElement = document.querySelectorAll('[data-line-number=\\\"' + startLineNumber + '\\\"]')[0].parentElement.parentElement.lastChild;\r\n      this.currentLineElement.style.border = '1px solid';\r\n      this.lineEndElement = null;\r\n    }\r\n\r\n    const $container = $('#fileContainer'),\r\n      $scrollTo = $('[data-line-number=\\\"' + startLineNumber + '\\\"]');\r\n\r\n    $container.scrollTop(\r\n      $scrollTo.offset().top - $container.offset().top + $container.scrollTop() - 30\r\n    );\r\n  }\r\n\r\n  public performSearch(inputKeyEvent: any) {\r\n    if (inputKeyEvent.code === 'Enter') {\r\n      if (inputKeyEvent.ctrlKey) this.searchActions.searchSelectedFile();\r\n      else if (inputKeyEvent.shiftKey) this.searchActions.contentSearch();\r\n      else {\r\n        this.searchActions.totalSearch();\r\n      }\r\n    }\r\n  }\r\n\r\n  public getLinesNumbersText(file: CurrentFile): string {\r\n    if (!file) return '';\r\n    return file.lines.map((line, index) => index).join('\\r\\n');\r\n  }\r\n\r\n\r\n  public setCurrentFile(fileObject: CurrentFile, callback: () => void) {\r\n    if (this.currentFile !== null && this.currentFile.name === fileObject.name) {\r\n      callback();\r\n      return;\r\n    }\r\n\r\n    let escapeHtml = (htmlText) => {\r\n      return htmlText\r\n        .replace(/&/g, '&amp;')\r\n        .replace(/</g, '&lt;')\r\n        .replace(/>/g, '&gt;')\r\n        .replace(/\"/g, '&quot;')\r\n        .replace(/'/g, '&#039;');\r\n    };\r\n\r\n    let fileContent = escapeHtml(fileObject.content);\r\n\r\n    this.currentFile = {\r\n      content: fileContent,\r\n      name: fileObject.name,\r\n      node: fileObject.node,\r\n      lines: fileObject.lines\r\n    };\r\n    setTimeout(() => {\r\n      window['hljs'].lineNumbersBlock($('code')[0]);\r\n      window['hljs'].highlightBlock($('code')[0]);\r\n      setTimeout(() => {\r\n        callback();\r\n      }, 0);\r\n    }, 0);\r\n\r\n  }\r\n\r\n  public clickedChart(event) {\r\n    event.target.parentElement.focus();\r\n  }\r\n\r\n  public noSelectedNode() {\r\n    console.log('no node selected');\r\n    this.messageBoxQueue.push({title: 'no selected node', message: 'no selected node', displayTime: 10000});\r\n  }\r\n\r\n  public createMatchFromSelection() {\r\n    let createdNode = this.searchActions.createMatchFromSelection();\r\n    setTimeout(() => {\r\n      this.chart.setSelectionNodes([createdNode.id]);\r\n    }, 100);\r\n  }\r\n\r\n  public createFileNode() {\r\n    let fileNode = CreateUtils.createFileNode({file: 'new file', matches: [], content: 'new file'}, this.chart);\r\n    this.chart.addNodesAndLinks([fileNode]);\r\n    setTimeout(() => {\r\n      this.selectedNode = fileNode;\r\n    }, 100);\r\n  }\r\n\r\n  set markedText(text) {\r\n    text = text.trim();\r\n    this.searchJson.pattern = text;\r\n    this.searchJson.originalText = text;\r\n    this._markedText = text;\r\n  }\r\n\r\n  get markedText() {\r\n    return this._markedText;\r\n  }\r\n\r\n  private doubleClickOnNode(node: IdType, event) {\r\n    // this.chartActions.setPathNode(this.chart.getItem(node));\r\n    this.previousDblClickedNode = this.lastDblClickedNode;\r\n    this.lastDblClickedNode = this.chart.getItem(node) as Node;\r\n    this.showNodeEditBox = true\r\n    setTimeout(() => {\r\n      let textInput = document.getElementById('nodeTitle') as HTMLInputElement\r\n      textInput.style.left = event.event.center.x + 'px'\r\n      textInput.style.top = event.event.center.y + 'px'\r\n      textInput.focus();\r\n      textInput.select();\r\n    }, 50);\r\n  }\r\n\r\n  get selectedNode(): Node | Edge {\r\n    if (!this.chart) return null;\r\n    let selectedIds = this.chart.getSelection();\r\n    let selectedNodes = selectedIds.nodes;\r\n    let selectedEdges = selectedIds.edges;\r\n    if (selectedNodes.length === 1) return this.chart.nodes.get(selectedNodes[0]) as Node;\r\n    else {\r\n      if (selectedEdges.length === 1) return this.chart.edges.get(selectedEdges[0]) as Edge;\r\n      else return null;\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.fileElement = document.getElementById('fileContent') as HTMLTextAreaElement;\r\n    this.titleElement = document.getElementById('nodeTitle') as HTMLElement;\r\n    this.fileContainer = document.getElementById('fileContainer') as HTMLElement;\r\n    this.messageBoxElement = document.getElementById('message_box') as HTMLElement;\r\n    document.getElementById('fileContainer').style.fontSize = \"20px\"\r\n    this.fileElement.onkeydown = (e) => {\r\n      if (e.ctrlKey) return;\r\n      e.preventDefault();\r\n    };\r\n    this.fileElement.onmouseup = (e) => {\r\n      let markedText = window.getSelection().toString();\r\n      if (markedText === undefined || markedText === null || markedText.length === 0)\r\n        this.searchJson.isRegex = false;\r\n      this.markedText = window.getSelection().toString();\r\n    };\r\n\r\n    let chartElement = document.getElementById('vis_element');\r\n    this.chart.setUp(chartElement);\r\n    this.chart.setClickEvent((eventItem: EventItem) => {\r\n      this.selectedNode = eventItem.item;\r\n      if(!this.selectedNode) this.showNodeEditBox = false\r\n    });\r\n    this.chart.setDoubleClickEvent((clickedItem, event) => {\r\n      this.doubleClickOnNode(event.nodes[0], event);\r\n      console.log('dblclick on vla. clicked Id:', event);\r\n      return true;\r\n    });\r\n    this.chart.setKeyboardDeleteEvent((e) => {\r\n      if (e.keyCode === 46) { // delete button pressed\r\n        this.chartActions.deleteSelected();\r\n      }\r\n    });\r\n    this.chart.setDragStartEvent((eventItem: EventItem) => {\r\n      if (eventItem.item === null) return;\r\n      if (ChartUtils.isFileNode(eventItem.item)) {\r\n        this.chart.setSelectionNodes(this.chart.getNeighbours(eventItem.id).nodes.concat(eventItem.id));\r\n      }\r\n    });\r\n    this.chart.setDragEndEvent((eventItem: EventItem) => {\r\n      if (eventItem.item === null) return;\r\n      if (ChartUtils.isFileNode(eventItem.item)) {\r\n        this.chart.setSelectionNodes([eventItem.id]);\r\n      }\r\n      let draggedIds = this.chart.getSelection().nodes;\r\n      let newPositions = this.chart.chart.getPositions(draggedIds);\r\n      let items = this.chart.getItems(draggedIds).nodes;\r\n      let itemsWithNewPosition = items.map((i, index) => {\r\n        return {node: i, pos: newPositions[i.id]};\r\n      });\r\n      this.chart.setNodesPosition(itemsWithNewPosition, true);\r\n    });\r\n    this.chart.setOnBeforeDrawEvent((ctx) => {\r\n\r\n      try {\r\n        let fileNodes = this.chart.nodes.get().filter(node => {\r\n          return ChartUtils.isFileNode(node);\r\n        });\r\n        fileNodes.forEach(node => {\r\n          ctx.save();\r\n          let filePosition = this.chart.getPosition(node.id);\r\n          // box\r\n          let boundingRect = this.chart.getNeighboursBoudingBox(node.id, true);\r\n          let rectColor = '#a9a9a9';\r\n          let rectX = boundingRect.left - 10;\r\n          let rectY = boundingRect.top - 10;\r\n          let rectW = boundingRect.right - boundingRect.left + 20;\r\n          let rectH = boundingRect.bottom - boundingRect.top + 20;\r\n\r\n          ctx.lineWidth = 5;\r\n          ctx.setLineDash([5]);\r\n          ctx.strokeStyle = rectColor;\r\n          ctx.strokeRect(rectX, rectY, rectW, rectH);\r\n          // ctx.fillRect(rectX, rectY, rectW, rectH);\r\n\r\n          ctx.stroke();\r\n          let fontSize = 70;\r\n          ctx.font = `${70}px Arial`;\r\n          ctx.fillStyle = 'grey';\r\n          let labelLength = node.label.length * fontSize;\r\n          for (let i = 0; i < boundingRect.right - labelLength - 50; i += ChartConsts.FileNameDistance) {\r\n            ctx.fillText(node.label, filePosition.x + i, filePosition.y);\r\n          }\r\n          ctx.stroke();\r\n          ctx.restore();\r\n        });\r\n      } catch (ex) {\r\n\r\n      }\r\n    });\r\n    this.chart.setBlurNodeEvent((event: any) => {\r\n      if (1 === 1) return;\r\n      let hoveredId = event.node;\r\n      let nonConnectedIds = this.chart.getNotConnectedNodes(hoveredId);\r\n      let unbluredNodes = nonConnectedIds.nodes.map(nodeId => {\r\n        let node = this.chart.getItem(nodeId) as Node;\r\n        if (!node['previousStyle']) return node;\r\n        let nodePosition = this.chart.getPosition(nodeId);\r\n        node = Object.assign({}, node['previousStyle'], nodePosition, {font: {color: 'black'}});\r\n        node['previousStyle'] = undefined;\r\n        return node;\r\n      }) as Node[];\r\n      let unbluredEdges = nonConnectedIds.edges.map(i => {\r\n        let edge = this.chart.getItem(i) as Node;\r\n        if (!edge['previousStyle']) return i;\r\n        let newEdge = Utils.deepCopy(edge['previousStyle']);\r\n        return edge['previousStyle'];\r\n      });\r\n      this.chart.nodes.update(unbluredNodes);\r\n      this.chart.edges.update(unbluredEdges);\r\n    });\r\n\r\n    this.chart.setHoverNodeEvent((event: any) => {\r\n      if (1 === 1) return;\r\n\r\n      let hoveredId = event.node;\r\n      let nonConnectedIds = this.chart.getNotConnectedNodes(hoveredId);\r\n      let bluredNodes: Node[] = nonConnectedIds.nodes.map(nodeId => {\r\n        let node = this.chart.getItem(nodeId) as Node;\r\n        let previousStyle = JSON.parse(JSON.stringify(node));\r\n        return Object.assign({id: nodeId}, ChartStyles.dimmedNode, {previousStyle: previousStyle}) as Node;\r\n      });\r\n\r\n      let bluredEdges = nonConnectedIds.edges.map(edgeId => {\r\n        let edge = this.chart.getItem(edgeId) as Edge;\r\n        let previousStyle = JSON.parse(JSON.stringify(edge));\r\n        return Object.assign({id: edgeId}, ChartStyles.dimmedLink, {previousStyle: previousStyle});\r\n      });\r\n\r\n      this.chart.nodes.update(bluredNodes);\r\n      this.chart.edges.update(bluredEdges);\r\n    });\r\n  }\r\n\r\n  public messageBoxQueue: messageBoxItem[] = [];\r\n\r\n  public addMessage(title, message, displayTime) {\r\n    this.messageBoxQueue.push({title: title, message: message, displayTime: displayTime});\r\n    this.messageBoxElement.style.visibility = 'visible';\r\n    setTimeout(() => {\r\n      this.displayNextMessage();\r\n    }, displayTime);\r\n  }\r\n\r\n  public displayNextMessage() {\r\n    this.messageBoxQueue.shift();\r\n    if (this.messageBoxQueue.length === 0) {\r\n      this.messageBoxElement.style.visibility = 'hidden';\r\n    } else {\r\n      console.log(this.messageBoxQueue[0].displayTime);\r\n      setTimeout(() => {\r\n        this.displayNextMessage();\r\n      }, this.messageBoxQueue[0].displayTime);\r\n    }\r\n  }\r\n\r\n  public clearChart() {\r\n    this.currentFile = null;\r\n    this.chartActions.clearChart();\r\n  }\r\n\r\n  public createShape(shapeType: string) {\r\n    this.selectedNode = this.chartActions.createShape(this.selectedNode, shapeType);\r\n  }\r\n\r\n  public setTitle(event: Event) {\r\n    event.stopPropagation();\r\n    if (!this.selectedNode) return;\r\n    this.chartActions.setNodeTitle(this.selectedNode as Node, (event.target as HTMLTextAreaElement).value);\r\n  }\r\n\r\n  public setSelecteionColor(color) {\r\n    this.chart.setColor(this.chartActions.getSelectedLinksOrNodesOnly(), color);\r\n  }\r\n\r\n  public undo() {\r\n    this.chartActions.undo();\r\n  }\r\n\r\n  public linkNodes(linkStyle) {\r\n    let linkedNodesIds = this.chart.getSelection().nodes;\r\n    // linkedNodesIds.map(id => this.chart.getItem(id)).forEach(node => this.chartActions.setPathNode(node));\r\n    let linkedToNode = linkedNodesIds.pop();\r\n    let newLinks = [];\r\n    linkedNodesIds.forEach(nodeId => {\r\n      newLinks.push(this.chart.createLink(nodeId, linkedToNode, Object.assign(linkStyle, {arrows: {to: true}})));\r\n    });\r\n    this.chartActions.addToChartAndPosition(newLinks);\r\n  }\r\n\r\n  public reload() {\r\n    this.chart.setSelectionNodes([])\r\n    this.saveLoad.reload();\r\n  }\r\n\r\n  public clearVisiIds() {\r\n    this.http.post('http://localhost:2900' + EndPoints.clearVisiIds, {path: this.searchJson.path}).subscribe((response) => {\r\n      console.log('clear visi ids response', response);\r\n    });\r\n  }\r\n\r\n  public rewriteVisiIds() {\r\n    this.http.post('http://localhost:2900' + EndPoints.rewriteVisiIds, {}).subscribe((response) => {\r\n      console.log('rewrite visi ids response', response);\r\n    });\r\n  }\r\n\r\n  public fullSaveToFile() {\r\n    this.saveLoad.fullSaveToFile(this.saveJsonFileName);\r\n  }\r\n\r\n  public jsonSave() {\r\n    this.saveLoad.saveChartToJson(this.saveJsonFileName);\r\n  }\r\n\r\n  public loadFromFile(event) {\r\n    let file = event.srcElement.files[0];\r\n    if (file) {\r\n      let reader = new FileReader();\r\n      reader.readAsText(file, 'UTF-8');\r\n      reader.onload = (evt) => {\r\n        let loaded: { nodes: Node[], edges: Edge[] } = (JSON.parse(evt.target['result']));\r\n        this.saveLoad.load(loaded);\r\n      };\r\n      reader.onerror = (evt) => {\r\n        console.log('error reading file');\r\n      };\r\n      (document.getElementById('fileLoadInput') as HTMLInputElement).value = '';\r\n    }\r\n  }\r\n\r\n  public performSavedSearch(search: PreSearchJson) {\r\n    this.searchJson.pattern = PreSeacrhJsonsUtils.getSearchStringFromText(this.searchJson.pattern, search.regex);\r\n    this.searchJson.isRegex = true;\r\n    console.log(search);\r\n  }\r\n\r\n  pathDropdownClick(event: Event) {\r\n    event.stopPropagation();\r\n  }\r\n\r\n  setSelectedPath(pathValue: string) {\r\n    this.searchJson.path = pathValue;\r\n    localStorage.setItem(pathStorageKey, pathValue)\r\n    this.http.post('http://localhost:2900' + EndPoints.getAllFilesInPath, {folder: pathValue}).subscribe((res: { files: string[] }) => {\r\n      this.availableFiles = res.files;\r\n    });\r\n  }\r\n\r\n  private regexs = [\r\n    {'remark': 'add /s as regex option so . catptures new line as well'},\r\n    {\r\n      'title': 'get all functions location',\r\n      'regex': '(public|private) (.+)\\(.+\\).*{'\r\n    },\r\n    {\r\n      'title': 'get specific function location',\r\n      'regex': '(public|private)\\s*(__functionName___)\\(.+\\).*{',\r\n      'example': '(public|private)\\s*(isIdNode)\\(.+\\).*{'\r\n    },\r\n    {\r\n      'title': 'get specific function content',\r\n      'regex': '(public|private)\\s*(__functionName___)\\(.+\\).*{',\r\n      'example': '(public|private)\\s*(isIdNode)\\(.+\\).*{'\r\n    }\r\n\r\n  ];\r\n  public filterAvailableFiles(value) {\r\n    this.openFileSuggestions = this.availableFiles.filter(i=>i.indexOf(value)!==-1)\r\n  }\r\n\r\n  getFile(value: any) {\r\n    let selection = Utils.deepCopy(this.chart.getSelection());\r\n    this.chart.chart.setSelection({nodes: [], edges: []});\r\n    this.searchActions.doSearch({\r\n      path: value,\r\n      filenamePattern: null,\r\n      isFileNameRegex: false,\r\n      isRegex: false,\r\n      flags: 'gi',\r\n      originalText: \"\",\r\n      pattern: \"\",\r\n      title: null\r\n    }, ()=>{\r\n      this.chart.setSelection(selection)\r\n    });\r\n\r\n  }\r\n\r\n  increaseFileContentFont() {\r\n    this.changeFileContentFonSize(5)\r\n  }\r\n\r\n  decreaseFileContentFont() {\r\n    this.changeFileContentFonSize(-5)\r\n  }\r\n\r\n  changeFileContentFonSize(howMuch: number) {\r\n    let size = parseInt(document.getElementById('fileContainer').style.fontSize)\r\n    size = size + howMuch\r\n    document.getElementById('fileContainer').style.fontSize = size +'px'\r\n  }\r\n\r\n  focusOnFileOpenInput() {\r\n    setTimeout(()=>{this.openfileInput.focusInput()}, 0)\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/app.component.ts	(date 1572801070000)
+++ src/app/app.component.ts	(date 1572799667406)
@@ -35,7 +35,7 @@
   EndPoints, SearchJson, FileNode
 } from './types.nodejs';
 import {keyframes} from '@angular/core/src/animation/dsl';
-import {PreSearchJson, specificSearchJsons, PreSeacrhJsonsUtils} from './search/search.jsons';
+import {PreSearchJson, SearchJsons, PreSeacrhJsonsUtils} from './search/search.jsons';
 import {AreaSelect} from './chart/area.select';
 import {Utils} from './chart/Utils';
 
@@ -100,7 +100,8 @@
     console.log(this.shapeTypes);
     this.searchJson = StartSearchJson;
     this.typesMapping = typesMapping;
-    this.mySpecificSearchJsons = specificSearchJsons;
+    this.mySpecificSearchJsons = SearchJsons;
+    this.mySpecificSearchJsons = this.mySpecificSearchJsons.map((i, index)=>{i.color = NodeColors[index]; return i})
 
     window['Global_app'] = this;
   }
Index: src/app/chart/create.utils.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {Edge, Node} from 'vis';\r\nimport {ChartStyles} from './chart.consts';\r\nimport {ChartWrapper} from './chart.wrapper';\r\n\r\nimport * as md5 from 'md5';\r\nimport {FileNode, FindInFilesResponse, MatchInfo, SearchJson} from '../types.nodejs';\r\nimport {ChartUtils} from './chart.utils';\r\nimport { Utils } from './Utils';\r\n\r\n\r\nexport class CreateUtils {\r\n\r\n  public static getMatchNodeLabel(lineNumber, endLineNumber, label) {\r\n    label = label.replace(/^\\(\\d+\\):/, '');\r\n    if(label.length>100) {label=label.substring(0, 100)+'...'}\r\n    if(endLineNumber) return `(${lineNumber}-${endLineNumber}):${label.trim()}`;\r\n    return `(${lineNumber}):${label.trim()}`;\r\n  }\r\n\r\n  public static createOrUpdateMatchNode(match: MatchInfo, ofFileNodeId, chart: ChartWrapper, connectToNode: Node, layout: 'directional' | 'spread'): Array<Node|Edge> {\r\n    const searchIndex = chart.history.getSearchCount()\r\n    let results: Array<Node | Edge> = [];\r\n    let matchNode: Node = ChartUtils.getSameMatch(chart, match, ofFileNodeId);\r\n    if(matchNode===null) {\r\n      let matchNodeId = match.id;\r\n      let matchNodeProps = Object.assign({\r\n        d: Object.assign(match, {ofFile: ofFileNodeId})\r\n      }, ChartStyles.resultNode);\r\n      let label = CreateUtils.getMatchNodeLabel(match.lineNumber, match.endLineNumber, match.line);\r\n      if(label.length>30) label = label.substring(0, 30) + '...'\r\n      matchNode = chart.createNode(matchNodeId, label, matchNodeProps);\r\n      matchNode = Utils.deepMerge(matchNode, ChartStyles.searchNode)\r\n    } else {\r\n      let matchAttributes = ChartUtils.getMatchAttributes(matchNode)\r\n      if(matchAttributes.ofFile!==ofFileNodeId) {\r\n        matchNode.x = null; matchNode.y = null;\r\n        let fileEdge = chart.getItems(chart.getAllItemIds().edges).edges.find((i)=>{\r\n          return ((i.from===match.id && i.to===matchAttributes.ofFile) || (i.from===matchAttributes.ofFile && i.to===match.id))\r\n        })\r\n        if(fileEdge)\r\n          chart.deleteItems({edges: [fileEdge.id], nodes: []})\r\n        else\r\n          console.log(`no file edge found from match ${match.id} and file node ${matchAttributes.ofFile}`)\r\n      }\r\n      ChartUtils.setAttributes(matchNode, match)\r\n    }\r\n    results.push(matchNode);\r\n    let fileEdge = CreateUtils.createFileEdge(chart, ofFileNodeId, match.id);\r\n    if(layout==='spread') fileEdge.hidden=false;\r\n    results.push(fileEdge);\r\n    if (connectToNode !== null && connectToNode.id !== matchNode.id && !ChartUtils.isFileNode(connectToNode)) {\r\n      results.push(CreateUtils.createMatchEdge(chart, connectToNode.id, matchNode.id, matchNode.label));\r\n    }\r\n    if(searchIndex) {\r\n      let numberingNode = chart.createNode('numbering_'+matchNode.id+'_'+searchIndex, searchIndex.toString(), ChartStyles.numberNode)\r\n      let numberingEdge = chart.createLink(matchNode.id, numberingNode.id, ChartStyles.numberLink)\r\n      results = results.concat([numberingNode, numberingEdge])\r\n    }\r\n    return results\r\n  }\r\n\r\n\r\n  // if match exists, in same file - update line, line number\r\n  // if match exists, different file - update line, line number, move to new file\r\n  public static createId(filePath, lineNumber): string {\r\n    return md5(filePath + lineNumber + new Date().getMilliseconds);\r\n  }\r\n\r\n  public static createFileEdge(chart: ChartWrapper, ofFileNodeId, matchNodeId) {\r\n    return chart.createLink(ofFileNodeId, matchNodeId, ChartStyles.fileLink);\r\n  }\r\n\r\n  public static createMatchEdge(chart: ChartWrapper, nodeToConnectId, matchNodId, matchValue) {\r\n    return chart.createLink(nodeToConnectId, matchNodId, ChartStyles.matchMatchLink, matchValue);\r\n  }\r\n\r\n  public static createFileNode(file: FindInFilesResponse, chart: ChartWrapper): FileNode {\r\n    let pathChar = file.file.indexOf('\\\\') != -1 ? '\\\\' : '/';\r\n    let fileName = file.file.substring(file.file.lastIndexOf(pathChar), file.file.length);\r\n    let fileNode = chart.createNode(file.file, fileName, ChartStyles.fileNode);\r\n    fileNode.color.border = Utils.shadeColor(Utils.getRandomColor(), 95)\r\n    return ChartUtils.setElementAttributesAndGet(Utils.deepCopy(fileNode), {fileContent: file.content, path: file.file, level: 0});\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/chart/create.utils.ts	(date 1572801070000)
+++ src/app/chart/create.utils.ts	(date 1572801332085)
@@ -1,11 +1,12 @@
 import {Edge, Node} from 'vis';
-import {ChartStyles} from './chart.consts';
+import {ChartStyles, NodeColors} from './chart.consts';
 import {ChartWrapper} from './chart.wrapper';
 
 import * as md5 from 'md5';
 import {FileNode, FindInFilesResponse, MatchInfo, SearchJson} from '../types.nodejs';
 import {ChartUtils} from './chart.utils';
 import { Utils } from './Utils';
+import {SearchJsons} from '../search/search.jsons';
 
 
 export class CreateUtils {
@@ -44,6 +45,14 @@
       }
       ChartUtils.setAttributes(matchNode, match)
     }
+
+    let colorMap = SearchJsons.map((i)=>{return i.regex.replace('__TEXT__', '.+')})
+    let searchTypeIndex = colorMap.findIndex((i)=>{return match.line.match(i)!==null})
+    if(searchTypeIndex!==-1)  {
+      matchNode.borderWidth = 5
+      matchNode.color.border = NodeColors[searchTypeIndex]
+    }
+
     results.push(matchNode);
     let fileEdge = CreateUtils.createFileEdge(chart, ofFileNodeId, match.id);
     if(layout==='spread') fileEdge.hidden=false;
